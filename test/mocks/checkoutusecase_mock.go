// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/common/dto"

	mock "github.com/stretchr/testify/mock"

	valueobject "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/valueObject"
)

// MockCheckoutUseCase is an autogenerated mock type for the CheckoutUseCase type
type MockCheckoutUseCase struct {
	mock.Mock
}

type MockCheckoutUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCheckoutUseCase) EXPECT() *MockCheckoutUseCase_Expecter {
	return &MockCheckoutUseCase_Expecter{mock: &_m.Mock}
}

// CreateCheckout provides a mock function with given fields: orderId
func (_m *MockCheckoutUseCase) CreateCheckout(orderId string) (*dto.CreateCheckout, error) {
	ret := _m.Called(orderId)

	if len(ret) == 0 {
		panic("no return value specified for CreateCheckout")
	}

	var r0 *dto.CreateCheckout
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.CreateCheckout, error)); ok {
		return rf(orderId)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.CreateCheckout); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateCheckout)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCheckoutUseCase_CreateCheckout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCheckout'
type MockCheckoutUseCase_CreateCheckout_Call struct {
	*mock.Call
}

// CreateCheckout is a helper method to define mock.On call
//   - orderId string
func (_e *MockCheckoutUseCase_Expecter) CreateCheckout(orderId interface{}) *MockCheckoutUseCase_CreateCheckout_Call {
	return &MockCheckoutUseCase_CreateCheckout_Call{Call: _e.mock.On("CreateCheckout", orderId)}
}

func (_c *MockCheckoutUseCase_CreateCheckout_Call) Run(run func(orderId string)) *MockCheckoutUseCase_CreateCheckout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockCheckoutUseCase_CreateCheckout_Call) Return(_a0 *dto.CreateCheckout, _a1 error) *MockCheckoutUseCase_CreateCheckout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCheckoutUseCase_CreateCheckout_Call) RunAndReturn(run func(string) (*dto.CreateCheckout, error)) *MockCheckoutUseCase_CreateCheckout_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCheckout provides a mock function with given fields: orderId, status
func (_m *MockCheckoutUseCase) UpdateCheckout(orderId string, status valueobject.OrderStatus) error {
	ret := _m.Called(orderId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCheckout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, valueobject.OrderStatus) error); ok {
		r0 = rf(orderId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCheckoutUseCase_UpdateCheckout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCheckout'
type MockCheckoutUseCase_UpdateCheckout_Call struct {
	*mock.Call
}

// UpdateCheckout is a helper method to define mock.On call
//   - orderId string
//   - status valueobject.OrderStatus
func (_e *MockCheckoutUseCase_Expecter) UpdateCheckout(orderId interface{}, status interface{}) *MockCheckoutUseCase_UpdateCheckout_Call {
	return &MockCheckoutUseCase_UpdateCheckout_Call{Call: _e.mock.On("UpdateCheckout", orderId, status)}
}

func (_c *MockCheckoutUseCase_UpdateCheckout_Call) Run(run func(orderId string, status valueobject.OrderStatus)) *MockCheckoutUseCase_UpdateCheckout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(valueobject.OrderStatus))
	})
	return _c
}

func (_c *MockCheckoutUseCase_UpdateCheckout_Call) Return(_a0 error) *MockCheckoutUseCase_UpdateCheckout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCheckoutUseCase_UpdateCheckout_Call) RunAndReturn(run func(string, valueobject.OrderStatus) error) *MockCheckoutUseCase_UpdateCheckout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCheckoutUseCase creates a new instance of MockCheckoutUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCheckoutUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCheckoutUseCase {
	mock := &MockCheckoutUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
