// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/entity"

	mock "github.com/stretchr/testify/mock"

	valueobject "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/valueObject"
)

// MockProductGateway is an autogenerated mock type for the ProductGateway type
type MockProductGateway struct {
	mock.Mock
}

type MockProductGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductGateway) EXPECT() *MockProductGateway_Expecter {
	return &MockProductGateway_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *MockProductGateway) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductGateway_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProductGateway_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MockProductGateway_Expecter) Delete(id interface{}) *MockProductGateway_Delete_Call {
	return &MockProductGateway_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockProductGateway_Delete_Call) Run(run func(id string)) *MockProductGateway_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductGateway_Delete_Call) Return(_a0 error) *MockProductGateway_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductGateway_Delete_Call) RunAndReturn(run func(string) error) *MockProductGateway_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *MockProductGateway) FindAll() ([]entity.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductGateway_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockProductGateway_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockProductGateway_Expecter) FindAll() *MockProductGateway_FindAll_Call {
	return &MockProductGateway_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockProductGateway_FindAll_Call) Run(run func()) *MockProductGateway_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProductGateway_FindAll_Call) Return(_a0 []entity.Product, _a1 error) *MockProductGateway_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductGateway_FindAll_Call) RunAndReturn(run func() ([]entity.Product, error)) *MockProductGateway_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByCategory provides a mock function with given fields: category
func (_m *MockProductGateway) FindAllByCategory(category valueobject.Category) ([]entity.Product, error) {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByCategory")
	}

	var r0 []entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(valueobject.Category) ([]entity.Product, error)); ok {
		return rf(category)
	}
	if rf, ok := ret.Get(0).(func(valueobject.Category) []entity.Product); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(valueobject.Category) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductGateway_FindAllByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByCategory'
type MockProductGateway_FindAllByCategory_Call struct {
	*mock.Call
}

// FindAllByCategory is a helper method to define mock.On call
//   - category valueobject.Category
func (_e *MockProductGateway_Expecter) FindAllByCategory(category interface{}) *MockProductGateway_FindAllByCategory_Call {
	return &MockProductGateway_FindAllByCategory_Call{Call: _e.mock.On("FindAllByCategory", category)}
}

func (_c *MockProductGateway_FindAllByCategory_Call) Run(run func(category valueobject.Category)) *MockProductGateway_FindAllByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(valueobject.Category))
	})
	return _c
}

func (_c *MockProductGateway_FindAllByCategory_Call) Return(_a0 []entity.Product, _a1 error) *MockProductGateway_FindAllByCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductGateway_FindAllByCategory_Call) RunAndReturn(run func(valueobject.Category) ([]entity.Product, error)) *MockProductGateway_FindAllByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockProductGateway) FindById(id string) (*entity.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProductGateway_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockProductGateway_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id string
func (_e *MockProductGateway_Expecter) FindById(id interface{}) *MockProductGateway_FindById_Call {
	return &MockProductGateway_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockProductGateway_FindById_Call) Run(run func(id string)) *MockProductGateway_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockProductGateway_FindById_Call) Return(_a0 *entity.Product, _a1 error) *MockProductGateway_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProductGateway_FindById_Call) RunAndReturn(run func(string) (*entity.Product, error)) *MockProductGateway_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: product
func (_m *MockProductGateway) Save(product *entity.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductGateway_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockProductGateway_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - product *entity.Product
func (_e *MockProductGateway_Expecter) Save(product interface{}) *MockProductGateway_Save_Call {
	return &MockProductGateway_Save_Call{Call: _e.mock.On("Save", product)}
}

func (_c *MockProductGateway_Save_Call) Run(run func(product *entity.Product)) *MockProductGateway_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Product))
	})
	return _c
}

func (_c *MockProductGateway_Save_Call) Return(_a0 error) *MockProductGateway_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductGateway_Save_Call) RunAndReturn(run func(*entity.Product) error) *MockProductGateway_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: product
func (_m *MockProductGateway) Update(product *entity.Product) error {
	ret := _m.Called(product)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Product) error); ok {
		r0 = rf(product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockProductGateway_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProductGateway_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - product *entity.Product
func (_e *MockProductGateway_Expecter) Update(product interface{}) *MockProductGateway_Update_Call {
	return &MockProductGateway_Update_Call{Call: _e.mock.On("Update", product)}
}

func (_c *MockProductGateway_Update_Call) Run(run func(product *entity.Product)) *MockProductGateway_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Product))
	})
	return _c
}

func (_c *MockProductGateway_Update_Call) Return(_a0 error) *MockProductGateway_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProductGateway_Update_Call) RunAndReturn(run func(*entity.Product) error) *MockProductGateway_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProductGateway creates a new instance of MockProductGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductGateway {
	mock := &MockProductGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
