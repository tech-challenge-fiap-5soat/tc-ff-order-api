// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/entity"

	mock "github.com/stretchr/testify/mock"

	valueobject "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/valueObject"
)

// MockOrderGateway is an autogenerated mock type for the OrderGateway type
type MockOrderGateway struct {
	mock.Mock
}

type MockOrderGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderGateway) EXPECT() *MockOrderGateway_Expecter {
	return &MockOrderGateway_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *MockOrderGateway) FindAll() ([]entity.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderGateway_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockOrderGateway_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockOrderGateway_Expecter) FindAll() *MockOrderGateway_FindAll_Call {
	return &MockOrderGateway_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockOrderGateway_FindAll_Call) Run(run func()) *MockOrderGateway_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderGateway_FindAll_Call) Return(_a0 []entity.Order, _a1 error) *MockOrderGateway_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderGateway_FindAll_Call) RunAndReturn(run func() ([]entity.Order, error)) *MockOrderGateway_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByStatus provides a mock function with given fields: status
func (_m *MockOrderGateway) FindAllByStatus(status valueobject.OrderStatus) ([]entity.Order, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByStatus")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(valueobject.OrderStatus) ([]entity.Order, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(valueobject.OrderStatus) []entity.Order); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(valueobject.OrderStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderGateway_FindAllByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByStatus'
type MockOrderGateway_FindAllByStatus_Call struct {
	*mock.Call
}

// FindAllByStatus is a helper method to define mock.On call
//   - status valueobject.OrderStatus
func (_e *MockOrderGateway_Expecter) FindAllByStatus(status interface{}) *MockOrderGateway_FindAllByStatus_Call {
	return &MockOrderGateway_FindAllByStatus_Call{Call: _e.mock.On("FindAllByStatus", status)}
}

func (_c *MockOrderGateway_FindAllByStatus_Call) Run(run func(status valueobject.OrderStatus)) *MockOrderGateway_FindAllByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(valueobject.OrderStatus))
	})
	return _c
}

func (_c *MockOrderGateway_FindAllByStatus_Call) Return(_a0 []entity.Order, _a1 error) *MockOrderGateway_FindAllByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderGateway_FindAllByStatus_Call) RunAndReturn(run func(valueobject.OrderStatus) ([]entity.Order, error)) *MockOrderGateway_FindAllByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockOrderGateway) FindById(id string) (*entity.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderGateway_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockOrderGateway_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id string
func (_e *MockOrderGateway_Expecter) FindById(id interface{}) *MockOrderGateway_FindById_Call {
	return &MockOrderGateway_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockOrderGateway_FindById_Call) Run(run func(id string)) *MockOrderGateway_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderGateway_FindById_Call) Return(_a0 *entity.Order, _a1 error) *MockOrderGateway_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderGateway_FindById_Call) RunAndReturn(run func(string) (*entity.Order, error)) *MockOrderGateway_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: order
func (_m *MockOrderGateway) Save(order *entity.Order) (string, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Order) (string, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(*entity.Order) string); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.Order) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderGateway_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockOrderGateway_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - order *entity.Order
func (_e *MockOrderGateway_Expecter) Save(order interface{}) *MockOrderGateway_Save_Call {
	return &MockOrderGateway_Save_Call{Call: _e.mock.On("Save", order)}
}

func (_c *MockOrderGateway_Save_Call) Run(run func(order *entity.Order)) *MockOrderGateway_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Order))
	})
	return _c
}

func (_c *MockOrderGateway_Save_Call) Return(_a0 string, _a1 error) *MockOrderGateway_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderGateway_Save_Call) RunAndReturn(run func(*entity.Order) (string, error)) *MockOrderGateway_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: order
func (_m *MockOrderGateway) Update(order *entity.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderGateway_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockOrderGateway_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - order *entity.Order
func (_e *MockOrderGateway_Expecter) Update(order interface{}) *MockOrderGateway_Update_Call {
	return &MockOrderGateway_Update_Call{Call: _e.mock.On("Update", order)}
}

func (_c *MockOrderGateway_Update_Call) Run(run func(order *entity.Order)) *MockOrderGateway_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Order))
	})
	return _c
}

func (_c *MockOrderGateway_Update_Call) Return(_a0 error) *MockOrderGateway_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderGateway_Update_Call) RunAndReturn(run func(*entity.Order) error) *MockOrderGateway_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderGateway creates a new instance of MockOrderGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderGateway {
	mock := &MockOrderGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
