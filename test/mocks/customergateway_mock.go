// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/entity"

	mock "github.com/stretchr/testify/mock"

	valueobject "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/valueObject"
)

// MockCustomerGateway is an autogenerated mock type for the CustomerGateway type
type MockCustomerGateway struct {
	mock.Mock
}

type MockCustomerGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerGateway) EXPECT() *MockCustomerGateway_Expecter {
	return &MockCustomerGateway_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: cpf
func (_m *MockCustomerGateway) Find(cpf valueobject.CPF) (*entity.Customer, error) {
	ret := _m.Called(cpf)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *entity.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(valueobject.CPF) (*entity.Customer, error)); ok {
		return rf(cpf)
	}
	if rf, ok := ret.Get(0).(func(valueobject.CPF) *entity.Customer); ok {
		r0 = rf(cpf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(valueobject.CPF) error); ok {
		r1 = rf(cpf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCustomerGateway_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCustomerGateway_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - cpf valueobject.CPF
func (_e *MockCustomerGateway_Expecter) Find(cpf interface{}) *MockCustomerGateway_Find_Call {
	return &MockCustomerGateway_Find_Call{Call: _e.mock.On("Find", cpf)}
}

func (_c *MockCustomerGateway_Find_Call) Run(run func(cpf valueobject.CPF)) *MockCustomerGateway_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(valueobject.CPF))
	})
	return _c
}

func (_c *MockCustomerGateway_Find_Call) Return(_a0 *entity.Customer, _a1 error) *MockCustomerGateway_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCustomerGateway_Find_Call) RunAndReturn(run func(valueobject.CPF) (*entity.Customer, error)) *MockCustomerGateway_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: customer
func (_m *MockCustomerGateway) Save(customer *entity.Customer) error {
	ret := _m.Called(customer)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Customer) error); ok {
		r0 = rf(customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCustomerGateway_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockCustomerGateway_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - customer *entity.Customer
func (_e *MockCustomerGateway_Expecter) Save(customer interface{}) *MockCustomerGateway_Save_Call {
	return &MockCustomerGateway_Save_Call{Call: _e.mock.On("Save", customer)}
}

func (_c *MockCustomerGateway_Save_Call) Run(run func(customer *entity.Customer)) *MockCustomerGateway_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Customer))
	})
	return _c
}

func (_c *MockCustomerGateway_Save_Call) Return(_a0 error) *MockCustomerGateway_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCustomerGateway_Save_Call) RunAndReturn(run func(*entity.Customer) error) *MockCustomerGateway_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCustomerGateway creates a new instance of MockCustomerGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerGateway {
	mock := &MockCustomerGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
