// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/common/dto"
	entity "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/entity"

	mock "github.com/stretchr/testify/mock"

	valueobject "github.com/tech-challenge-fiap-5soat/tc-ff-order-api/src/core/valueObject"
)

// MockOrderUseCase is an autogenerated mock type for the OrderUseCase type
type MockOrderUseCase struct {
	mock.Mock
}

type MockOrderUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderUseCase) EXPECT() *MockOrderUseCase_Expecter {
	return &MockOrderUseCase_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: order
func (_m *MockOrderUseCase) CreateOrder(order dto.OrderCreateDTO) (string, error) {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(dto.OrderCreateDTO) (string, error)); ok {
		return rf(order)
	}
	if rf, ok := ret.Get(0).(func(dto.OrderCreateDTO) string); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(dto.OrderCreateDTO) error); ok {
		r1 = rf(order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUseCase_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockOrderUseCase_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - order dto.OrderCreateDTO
func (_e *MockOrderUseCase_Expecter) CreateOrder(order interface{}) *MockOrderUseCase_CreateOrder_Call {
	return &MockOrderUseCase_CreateOrder_Call{Call: _e.mock.On("CreateOrder", order)}
}

func (_c *MockOrderUseCase_CreateOrder_Call) Run(run func(order dto.OrderCreateDTO)) *MockOrderUseCase_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dto.OrderCreateDTO))
	})
	return _c
}

func (_c *MockOrderUseCase_CreateOrder_Call) Return(_a0 string, _a1 error) *MockOrderUseCase_CreateOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUseCase_CreateOrder_Call) RunAndReturn(run func(dto.OrderCreateDTO) (string, error)) *MockOrderUseCase_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields:
func (_m *MockOrderUseCase) FindAll() ([]entity.Order, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Order, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUseCase_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockOrderUseCase_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockOrderUseCase_Expecter) FindAll() *MockOrderUseCase_FindAll_Call {
	return &MockOrderUseCase_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockOrderUseCase_FindAll_Call) Run(run func()) *MockOrderUseCase_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrderUseCase_FindAll_Call) Return(_a0 []entity.Order, _a1 error) *MockOrderUseCase_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUseCase_FindAll_Call) RunAndReturn(run func() ([]entity.Order, error)) *MockOrderUseCase_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: id
func (_m *MockOrderUseCase) FindById(id string) (*entity.Order, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Order, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUseCase_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockOrderUseCase_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - id string
func (_e *MockOrderUseCase_Expecter) FindById(id interface{}) *MockOrderUseCase_FindById_Call {
	return &MockOrderUseCase_FindById_Call{Call: _e.mock.On("FindById", id)}
}

func (_c *MockOrderUseCase_FindById_Call) Run(run func(id string)) *MockOrderUseCase_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrderUseCase_FindById_Call) Return(_a0 *entity.Order, _a1 error) *MockOrderUseCase_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUseCase_FindById_Call) RunAndReturn(run func(string) (*entity.Order, error)) *MockOrderUseCase_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByStatus provides a mock function with given fields: status
func (_m *MockOrderUseCase) GetAllByStatus(status valueobject.OrderStatus) ([]entity.Order, error) {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByStatus")
	}

	var r0 []entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(valueobject.OrderStatus) ([]entity.Order, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(valueobject.OrderStatus) []entity.Order); ok {
		r0 = rf(status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(valueobject.OrderStatus) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderUseCase_GetAllByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByStatus'
type MockOrderUseCase_GetAllByStatus_Call struct {
	*mock.Call
}

// GetAllByStatus is a helper method to define mock.On call
//   - status valueobject.OrderStatus
func (_e *MockOrderUseCase_Expecter) GetAllByStatus(status interface{}) *MockOrderUseCase_GetAllByStatus_Call {
	return &MockOrderUseCase_GetAllByStatus_Call{Call: _e.mock.On("GetAllByStatus", status)}
}

func (_c *MockOrderUseCase_GetAllByStatus_Call) Run(run func(status valueobject.OrderStatus)) *MockOrderUseCase_GetAllByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(valueobject.OrderStatus))
	})
	return _c
}

func (_c *MockOrderUseCase_GetAllByStatus_Call) Return(_a0 []entity.Order, _a1 error) *MockOrderUseCase_GetAllByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderUseCase_GetAllByStatus_Call) RunAndReturn(run func(valueobject.OrderStatus) ([]entity.Order, error)) *MockOrderUseCase_GetAllByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// RequetOrderPreparation provides a mock function with given fields: order
func (_m *MockOrderUseCase) RequetOrderPreparation(order *entity.Order) error {
	ret := _m.Called(order)

	if len(ret) == 0 {
		panic("no return value specified for RequetOrderPreparation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Order) error); ok {
		r0 = rf(order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderUseCase_RequetOrderPreparation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequetOrderPreparation'
type MockOrderUseCase_RequetOrderPreparation_Call struct {
	*mock.Call
}

// RequetOrderPreparation is a helper method to define mock.On call
//   - order *entity.Order
func (_e *MockOrderUseCase_Expecter) RequetOrderPreparation(order interface{}) *MockOrderUseCase_RequetOrderPreparation_Call {
	return &MockOrderUseCase_RequetOrderPreparation_Call{Call: _e.mock.On("RequetOrderPreparation", order)}
}

func (_c *MockOrderUseCase_RequetOrderPreparation_Call) Run(run func(order *entity.Order)) *MockOrderUseCase_RequetOrderPreparation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Order))
	})
	return _c
}

func (_c *MockOrderUseCase_RequetOrderPreparation_Call) Return(_a0 error) *MockOrderUseCase_RequetOrderPreparation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderUseCase_RequetOrderPreparation_Call) RunAndReturn(run func(*entity.Order) error) *MockOrderUseCase_RequetOrderPreparation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function with given fields: orderId, order
func (_m *MockOrderUseCase) UpdateOrder(orderId string, order dto.OrderUpdateDTO) error {
	ret := _m.Called(orderId, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, dto.OrderUpdateDTO) error); ok {
		r0 = rf(orderId, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderUseCase_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type MockOrderUseCase_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - orderId string
//   - order dto.OrderUpdateDTO
func (_e *MockOrderUseCase_Expecter) UpdateOrder(orderId interface{}, order interface{}) *MockOrderUseCase_UpdateOrder_Call {
	return &MockOrderUseCase_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", orderId, order)}
}

func (_c *MockOrderUseCase_UpdateOrder_Call) Run(run func(orderId string, order dto.OrderUpdateDTO)) *MockOrderUseCase_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(dto.OrderUpdateDTO))
	})
	return _c
}

func (_c *MockOrderUseCase_UpdateOrder_Call) Return(_a0 error) *MockOrderUseCase_UpdateOrder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderUseCase_UpdateOrder_Call) RunAndReturn(run func(string, dto.OrderUpdateDTO) error) *MockOrderUseCase_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrderStatus provides a mock function with given fields: orderId, status
func (_m *MockOrderUseCase) UpdateOrderStatus(orderId string, status valueobject.OrderStatus) error {
	ret := _m.Called(orderId, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrderStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, valueobject.OrderStatus) error); ok {
		r0 = rf(orderId, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrderUseCase_UpdateOrderStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrderStatus'
type MockOrderUseCase_UpdateOrderStatus_Call struct {
	*mock.Call
}

// UpdateOrderStatus is a helper method to define mock.On call
//   - orderId string
//   - status valueobject.OrderStatus
func (_e *MockOrderUseCase_Expecter) UpdateOrderStatus(orderId interface{}, status interface{}) *MockOrderUseCase_UpdateOrderStatus_Call {
	return &MockOrderUseCase_UpdateOrderStatus_Call{Call: _e.mock.On("UpdateOrderStatus", orderId, status)}
}

func (_c *MockOrderUseCase_UpdateOrderStatus_Call) Run(run func(orderId string, status valueobject.OrderStatus)) *MockOrderUseCase_UpdateOrderStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(valueobject.OrderStatus))
	})
	return _c
}

func (_c *MockOrderUseCase_UpdateOrderStatus_Call) Return(_a0 error) *MockOrderUseCase_UpdateOrderStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrderUseCase_UpdateOrderStatus_Call) RunAndReturn(run func(string, valueobject.OrderStatus) error) *MockOrderUseCase_UpdateOrderStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderUseCase creates a new instance of MockOrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderUseCase {
	mock := &MockOrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
